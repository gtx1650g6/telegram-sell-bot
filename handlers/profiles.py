#     __  __           _         _              ____       _             _      _   
#    |  \/  | __ _  __| | ___   | |__  _   _   |  _ \ __ _| |_ _ __ ___ | | ___| |_ 
#    | |\/| |/ _` |/ _` |/ _ \  | '_ \| | | |  | |_) / _` | __| '__/ _ \| |/ _ \ __|
#    | |  | | (_| | (_| |  __/  | |_) | |_| |  |  __/ (_| | |_| | | (_) | |  __/ |_ 
#    |_|  |_|\__,_|\__,_|\___|  |_.__/ \__, |  |_|   \__,_|\__|_|  \___/|_|\___|\__|
#                                      |___/                                       

from aiogram import Router, types
from database import users, admins
from keyboards import profile_kb
import datetime

router = Router()

@router.message(lambda message: message.text.lower()[2:] == "–ø—Ä–æ—Ñ–∏–ª—å")
async def profile_message_handler(message: types.Message):
    id_for_db = message.from_user.id
    data = users.profile(id_for_db)
    time = datetime.datetime.fromisoformat(data[3])
    admins_list = admins.all()
    rights = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    for k in range(len(admins_list)):
        if admins_list[k][1] == message.from_user.id:
            rights = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

    await message.answer(
        f"<b>> <u>–î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç–∞</u></b>\n\nüìé <b>–ù–∏–∫–Ω–µ–π–º:</b> @{data[1]}\n‚úâ <b>–ê–π–¥–∏:</b> {id_for_db}\n\n\n<b>> <u>–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–æ—Ç–µ</u></b>\n\nüÜî <b>–ê–π–¥–∏:</b> {data[0]} \nüí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> {data[2]}‚ÇΩ\nüìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {time.strftime("%d.%m.%Y")}\nüß© <b>–ü—Ä–∞–≤–∞: </b> {rights}\n\n\n<b>> <u>–î–æ–Ω–∞—Ç</u></b>\n\nüìà <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: </b>{data[4]}‚ÇΩ\nüìâ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: </b>{data[5]}‚ÇΩ",
        parse_mode="HTML",
        reply_markup=profile_kb
    )
